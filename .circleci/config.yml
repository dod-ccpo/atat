version: 2.1

parameters:
  deploy_atat:
    description: whether or not to deploy a new atat infra
    type: boolean
    default: false
  subscription_id:
    description: Subscription ID for the registry containing the application docker images.
    type: string
    default: ${AZURE_SUBSCRIPTION}
  ops_subscription_id:
    description: Subscription ID for the registry containing the operator docker images.
    type: string
    default: ${AZURE_SUBSCRIPTION_OPS}
  container_registry:
    description: |
      Container registry for built application images.
      This is where we push the built atat and nginx image to.
      It does not include the "azurecr.io" suffix.
    type: string
    default: ${AZURE_REGISTRY}
  app_registry:
    description: |
      Container registry for application and nginx images.
      This is where we store our built images.
    type: string
    default: ${ATAT_REGISTRY}
  ops_registry:
    description: |
      Container registry for base operations images.
      This is where we pull the rhelubi and rhel-py images from.
      It does not include the "azurecr.io" suffix.
    type: string
    default: ${AZURE_REGISTRY_OPS}
  tenant_id:
    type: string
    default: ${AZURE_SP_TENANT}
  sp:
    type: string
    default: ${AZURE_SP}
  sp_password:
    type: string
    default: ${AZURE_SP_PASSWORD}
  sp_object_id:
    type: string
    default: "__NONE__"
  operator_sp_url:
    type: string
    default: "__NONE__"
  container_env:
    type: string
    default: -e PGHOST=postgres -e REDIS_HOST=redis:6379
  azure_server_name:
    type: string
    default: ${AZURE_SERVER_NAME}
  namespace:
    type: string
    default: atat
  atat_image_tag:
    type: string
    default: ${AZURE_REGISTRY}.azurecr.io/atat:latest
  nginx_image_tag:
    type: string
    default: ${AZURE_REGISTRY}.azurecr.io/nginx:latest
  cluster_name:
    type: string
    default: ${CLUSTER_NAME}
  resource_group:
    type: string
    default: ${RESOURCE_GROUP}
  build_and_push_app_images:
    description: Causes a build with a single stage that creates and pushes atat and docker images docker images to a container registry only.
    type: boolean
    default: false
  build_and_push_ops_image:
    description: Causes a build with a single stage that creates and pushes the ops deployment image to a container registry only.
    type: boolean
    default: false
  build_branch:
    description: This is the branch we tell the deployment image to build its bastion & atat from
    type: string
    default: staging
  az_environment:
    description: Optional declaritive way to specify environment identifier. If length is > 0, this term is used else, a random pet name is generated to avoid collisions.
    type: string
    default: test

commands:
  install_azure_cli:
    steps:
      - run:
          name: Install Azure CLI
          command: |
            apk update
            apk add bash py3-pip
            apk add --virtual=build \
              linux-headers gcc libffi-dev musl-dev openssl-dev python3-dev make curl
            pip3 --no-cache-dir install -U pip
            pip3 --no-cache-dir install azure-cli
            curl -L https://aka.ms/acr/installaad/bash | /bin/bash
            apk del --purge build
  log_into_app_registry:
    steps:
      - run:
          name: Login to application registry
          shell: /bin/sh
          command: |
            az login \
              --service-principal \
              --tenant ${TENANT_ID} \
              --password ${SP_CLIENT_SECRET} \
              --username ${SP_CLIENT_ID}
            az account set -s ${SUBSCRIPTION_ID}
            echo "Successfully logged in to Azure CLI."
            az acr login --name ${ATAT_REGISTRY} | grep "Succeeded"
  log_into_ops_registry:
    steps:
      - run:
          name: Login to operations registry
          shell: /bin/sh
          command: |
            az login \
              --service-principal \
              --tenant ${AZURE_SP_TENANT} \
              --password ${AZURE_SP_PASSWORD} \
              --username ${AZURE_SP}
            az account set -s ${AZURE_SUBSCRIPTION_OPS}
            echo "Successfully logged in to Azure CLI."
            az acr login --name ${OPS_REGISTRY} | grep "Succeeded"
  cache_docker_images:
    steps:
      - run:
          name: Save the docker images to a cache
          command: |
            mkdir -p docker-cache
            docker save -o docker-cache/atat.tar atat:latest
            docker save -o docker-cache/builder.tar atat:builder
      - save_cache:
          key: docker-cache-{{ .Branch }}-{{ .Revision }}
          paths:
            - docker-cache
  restore_docker_image:
    steps:
      - restore_cache:
          keys:
            - docker-cache-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Restore Docker image from cache
          command: |
            docker load < docker-cache/atat.tar
            docker load < docker-cache/builder.tar
  setup_datastores:
    parameters:
      pgdatabase:
        type: string
        default: atat_test
    steps:
      - run:
          name: remove temp network if exists
          command: if docker network ls | grep atat  ; then docker network rm atat; fi
      - run:
          name: Set up temporary docker network
          command: docker network create atat
      - run:
          name: Start redis
          command: docker run -d --network atat --link redis:redis -p 6379:6379 --name redis circleci/redis:4-alpine3.8
      - run:
          name: Start postgres
          command: docker run -d --network atat --link postgres:postgres -p 5432:5432 --name postgres circleci/postgres:10-alpine-ram
      - run:
          name: Wait for containers
          command: sleep 3
      - run:
          name: Create database
          command: "docker exec postgres createdb -U postgres << parameters.pgdatabase >>"
      - run:
          name: Apply migrations
          command: docker run --network atat -e PGDATABASE=<< parameters.pgdatabase >> << pipeline.parameters.container_env >> atat:builder .venv/bin/python .venv/bin/alembic upgrade head
      - run:
          name: Apply the default permission sets
          command: docker run --network atat -e PGDATABASE=<< parameters.pgdatabase >> << pipeline.parameters.container_env >> atat:builder .venv/bin/python script/seed_roles.py

  deploy:
    parameters:
      namespace:
        type: string
        default: << pipeline.parameters.namespace >>
      atat_image_tag:
        type: string
        default: << pipeline.parameters.atat_image_tag >>
      nginx_image_tag:
        type: string
        default: << pipeline.parameters.nginx_image_tag >>
      ops_image_tag:
        type: string
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: 19.03.13
      - install_azure_cli
      - log_into_app_registry
      - run:
          name: Build atat image
          command: |
            az acr build \
              --registry ${ATAT_REGISTRY} \
              --build-arg "IMAGE=${ATAT_REGISTRY}.azurecr.io/rhel-py:latest" \
              --image "<< parameters.atat_image_tag >>" \
              --file Dockerfile \
              .
      - run:
          name: Build nginx image
          command: |
            az acr build \
              --registry ${ATAT_REGISTRY} \
              --build-arg "IMAGE=${ATAT_REGISTRY}.azurecr.io/rhel-py:latest" \
              --image "<< parameters.nginx_image_tag >>" \
              --file nginx.Dockerfile \
              .
      - run:
          name: Build ops image
          command: |
            az acr build \
              --registry ${ATAT_REGISTRY} \
              --build-arg "IMAGE=${ATAT_REGISTRY}.azurecr.io/rhel-py:latest" \
              --image "<< parameters.ops_image_tag >>" \
              --file ops.Dockerfile \
              .
      - run:
          name: Bastion Deploy
          command: |
            az container create \
            --resource-group ${ATAT_RESOURCE_GROUP_NAME} \
            --name "${CIRCLE_SHA1}-provisioner" \
            --ip-address Private \
            --vnet ${ATAT_VIRTUAL_NETWORK} \
            --subnet mgmt-subnet \
            --image << parameters.ops_image_tag >> \
            --registry-password ${SP_CLIENT_SECRET} \
            --registry-username ${SP_CLIENT_ID} \
            --secure-environment-variables "SP_CLIENT_ID=${SP_CLIENT_ID}" "SP_CLIENT_SECRET=${SP_CLIENT_SECRET}" "SUBSCRIPTION_ID=${SUBSCRIPTION_ID}" "OPS_REGISTRY=${OPS_REGISTRY}" "NAMESPACE=${NAMESPACE}" "ATAT_REGISTRY=${ATAT_REGISTRY}" "IMAGE_TAG=${CIRCLE_SHA1}" "OPS_RESOURCE_GROUP=${OPS_RESOURCE_GROUP}" "OPS_STORAGE_ACCOUNT=${OPS_STORAGE_ACCOUNT}" "TENANT_ID=${TENANT_ID}" \
            --command-line '/bin/bash -c "cd ../deploy && python3 justdeploy.py"' \
            --restart-policy Never
jobs:
  docker-build:
    docker:
      - image: docker:19
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: 19.03.13
      - install_azure_cli
      - log_into_ops_registry
      - run:
          name: Build images
          command: |
            docker build . --build-arg GIT_SHA=${CIRCLE_SHA1} --build-arg IMAGE=<< pipeline.parameters.ops_registry >>.azurecr.io/rhel-py -f ./Dockerfile -t atat:builder --target builder
            docker build . --build-arg GIT_SHA=${CIRCLE_SHA1} --build-arg IMAGE=<< pipeline.parameters.ops_registry >>.azurecr.io/rhel-py -f ./Dockerfile -t atat:latest
      - cache_docker_images

  test:
    docker:
      - image: docker:19
      - image: circleci/postgres:10-alpine-ram
      - image: circleci/redis:4-alpine3.8
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    environment:
      TF_VERSION: "0.12.24"
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
          version: 19.03.13
      - restore_docker_image
      - setup_datastores:
          pgdatabase: atat_test
      - run:
          name: Run CI tests
          command: |
            docker run \
              -e PGHOST=postgres \
              -e REDIS_HOST=redis:6379 \
              --network atat \
              atat:builder \
              /bin/sh -c "poetry install --no-root &&
                          wget https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip -O /install/tf.zip &&
                          unzip /install/tf.zip -d /bin/ &&
                          /bin/sh script/cibuild"

  integration-tests:
    docker:
      - image: docker:19
      - image: circleci/postgres:10-alpine-ram
      - image: circleci/redis:4-alpine3.8
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
          version: 19.03.13
      - restore_docker_image
      - setup_datastores:
          pgdatabase: atat
      - run:
          name: Log into Dockerhub
          command: echo "$DOCKERHUB_PASSWORD" | docker login --username $DOCKERHUB_USERNAME --password-stdin
      - run:
          name: Start application container
          command: |
            docker run -d \
            -e PGHOST=postgres \
            -e REDIS_HOST=redis:6379 \
            -p 8000:8000 \
            --network atat \
            --name test-atat \
            atat:builder \
            /bin/sh -c "
              echo CLOUD_PROVIDER=mock > .env &&\
              yarn build &&\
              pip3 install uwsgi &&\
              uwsgi \
              --callable app \
              --module app \
              --plugin python3 \
              --virtualenv /install/.venv \
              --http-socket :8000
            "
      - run:
          name: Wait for ATAT container to be available
          command: |
            docker pull curlimages/curl:latest
            docker run --network atat \
              curlimages/curl:latest \
              curl --connect-timeout 3 \
              --max-time 5 \
              --retry 120 \
              --retry-connrefused \
              --retry-delay 1 \
              --retry-max-time 120 \
              test-atat:8000
      - run:
          name: Execute Ghost Inspector test suite
          command: |
            docker pull ghostinspector/test-runner-standalone:latest
            docker run \
              -e NGROK_TOKEN=$NGROK_TOKEN \
              -e GI_API_KEY=$GI_API_KEY \
              -e GI_SUITE=$GI_SUITE \
              -e GI_PARAMS_JSON='{}' \
              -e APP_PORT="test-atat:8000" \
              --network atat \
              ghostinspector/test-runner-standalone:latest

  deploy-staging:
    docker:
      - image: docker:19
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - deploy:
          namespace: staging
          atat_image_tag: << pipeline.parameters.app_registry >>.azurecr.io/atat:${CIRCLE_SHA1}
          nginx_image_tag: << pipeline.parameters.app_registry >>.azurecr.io/nginx:${CIRCLE_SHA1}
          ops_image_tag: << pipeline.parameters.app_registry >>.azurecr.io/ops:${CIRCLE_SHA1}

  deploy-master:
    parameters:
      container_registry:
        type: string
        default: ${AZURE_REGISTRY}
    docker:
      - image: docker:19
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - deploy:
          namespace: master
          atat_image_tag: << pipeline.parameters.container_registry >>.azurecr.io/atat:master-${CIRCLE_SHA1}
          nginx_image_tag: << pipeline.parameters.container_registry >>.azurecr.io/nginx:master-${CIRCLE_SHA1}

  push-app-images:
    docker:
      - image: docker:19
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: 19.03.13
      - install_azure_cli
      - log_into_ops_registry
      - run:
          name: Build images
          command: |
            docker build . --build-arg GIT_SHA=${CIRCLE_SHA1} --build-arg IMAGE=<< pipeline.parameters.ops_registry >>.azurecr.io/rhel-py -f ./Dockerfile -t atat:builder --target builder
            docker build . --build-arg GIT_SHA=${CIRCLE_SHA1} --build-arg IMAGE=<< pipeline.parameters.ops_registry >>.azurecr.io/rhel-py -f ./Dockerfile -t atat:latest
      - run:
          name: Build nginx image
          command: docker build -t nginx:latest --build-arg IMAGE=<< pipeline.parameters.ops_registry >>.azurecr.io/rhelubi:8.2 - < nginx.Dockerfile
      - run:
          name: Tag images
          command: |
            docker tag atat:latest << pipeline.parameters.atat_image_tag >>
            docker tag nginx:latest << pipeline.parameters.nginx_image_tag >>
      - log_into_app_registry
      - run:
          name: Push image
          command: |
            docker push << pipeline.parameters.atat_image_tag >>
            docker push << pipeline.parameters.nginx_image_tag >>

  push-ops-image:
    docker:
      - image: docker:19
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    environment:
      DOCKER_BUILDKIT: 1
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
          version: 19.03.13
      - install_azure_cli
      - log_into_ops_registry
      - run:
          name: Build ops deployment image image
          command: |
            docker build \
            --cache-from <<pipeline.parameters.ops_registry >>.azurecr.io/ops-cache:latest \
            -t ops:latest \
            --build-arg operator_sp_client_id=${AZURE_SP} \
            --build-arg operator_sp_object_id=${OPERATOR_SP_OBJECT_ID} \
            --build-arg operator_sp_secret=${AZURE_SP_PASSWORD} \
            --build-arg azure_tenant=${AZURE_SP_TENANT} \
            --build-arg azure_subscription_id=${AZURE_SUBSCRIPTION} \
            --build-arg operator_sp_url=${OPERATOR_SP_URL} \
            -f ops.Dockerfile .
      - log_into_app_registry
      - run:
          name: Tag ops image
          command: docker tag ops:latest << pipeline.parameters.container_registry >>.azurecr.io/ops:latest
      - run:
          name: Push ops image
          command: docker push << pipeline.parameters.container_registry >>.azurecr.io/ops:latest
workflows:
  version: 2
  run-tests:
    when:
      not:
        and:
          - << pipeline.parameters.build_and_push_app_images >>
          - << pipeline.parameters.build_and_push_ops_image >>
    jobs:
      - docker-build
      - test:
          requires:
            - docker-build
      - integration-tests:
          requires:
            - docker-build
          filters:
            branches:
              only:
                - staging
                - master
      - deploy-staging:
          requires:
            - test
            - integration-tests
          filters:
            branches:
              only:
                - AT-5800-deployment
                - staging
      # - deploy-master:
      #     requires:
      #       - test
      #       - integration-tests
      #     filters:
      #       branches:
      #         only:
      #           - master

  push-app-images:
    when: << pipeline.parameters.build_and_push_app_images >>
    jobs:
      - push-app-images

  push-ops-image:
    when: << pipeline.parameters.build_and_push_ops_image >>
    jobs:
      - push-ops-image

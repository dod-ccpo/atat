---
# use https://github.com/kvz/json2hcl to conver hcl to json :)

#az ad sp create-for-rbac --name http://my-application --skip-assignment
#az keyvault set-policy --name my-key-vault --spn $AZURE_CLIENT_ID --secret-permissions get set list delete backup recover restore purge
#- name: check for existing keyvault policy write

- name: get variables files
  find:
    paths: "{{ tf_dir }}"
    patterns: "*.tf"
  register: file_list

- name: get tfvars files
  find:
    paths: "{{ tf_dir }}"
    patterns: "*.tfvars"
  register: tfvars_file_list

- name: file paths list
  set_fact:
    tf_file_paths: []

- name: tfvars file paths list
  set_fact:
    tfvars_file_paths: []

- name: tfvars file name list
  set_fact:
    tfvars_file_paths: "{{ tfvars_file_paths  + [ item.path ] }}"
  with_items: " {{ tfvars_file_list.files}} "

- name: file name list
  set_fact:
    tf_file_paths: "{{ tf_file_paths  + [ item.path ] }}"
  with_items: " {{ file_list.files}} "

- name: set vars types
  set_fact:
    #  tf_vars_types: "{{ tf_vars_types | default([])  + [  (item  |  regex_findall('^variable\\s+\"(\\w+)\".*$(?:\\n.*[type|description]\\s+=\\s+(\\w+))?', multiline=True, ignorecase=True )  )  ]    }}"
    tf_vars_types: "{{ tf_vars_types| default([]) + [ item | regex_findall('^variable\\s+\"(\\w+)\"\\s+({[^}]+})?',multiline=true )   ]}}"
  with_file: "{{ tf_file_paths }}"
  when: "{{ (item  |  regex_findall('^variable\\s+\"(\\w+)\".*$(?:\\n.*type\\s+=(.*))?', multiline=True, ignorecase=True ))   | length > 0 }}"

- name: split off and flatten type and description
  set_fact:
    asdf1: "{{ asdf1 | default([]) + ( [ [item.0] + (item.1 |  regex_findall('(\\w+)\\s+=\\s+\"?([^\"]+\\b)',multiline=true)) |flatten ]   ) }}"
  with_items: "{{  tf_vars_types}}"

- debug:
    msg: "{{ asdf1 }}"

- name: get sub elements
  set_fact:
    blaz: "{{ tf_vars_types.0 }}"

- debug:
    msg: "{{ item }}"
  loop: "{{ blaz}}"

- name: split off and flatten type and description
  set_fact:
    asdf: "{{ asdf | default([]) + [ vobj| default({})| combine( { 'name': item[0], 'description': ds_string, 'type':type_string  }  )] }}"
  vars:
    #  new_item: "{{ ( (item[1] |  regex_findall('(\\w+)\\s+=\\s+\"?([^\"]+\\b)',multiline=true)) ) }}"

    ds: "{{   (item[1] |  regex_findall('(description)\\s+=\\s+\"?([^\"]+\\b)',multiline=true) |flatten |string) | regex_replace('\\[(.*description.*),(.*)\\]','\\2') | string | trim | regex_replace(\"'\",'')  }}"
    ds_string: "{{ (ds | length) | ternary(ds,'')}}"
    type_string: "{{ (type | length> 0 )| ternary(type,'')}}"
    type: "{{ ((item[1] |  regex_findall('(type)\\s+=\\s+\"?([^\"]+\\b)',multiline=true) |flatten |string) | regex_replace('\\[(.*type.*),(.*)\\]','\\2') | string | trim).replace(\"'\",'')  }}"
  loop: "{{  tf_vars_types[0]  }}"

- name: set values
  set_fact:
    vars_dict: "{{  vars_dict | default([]) + [( bla |default({}) | combine(  new_item | from_yaml  ) )]  }}"
  vars:
    #                                                                                                                                                                                                         regex_replace('^\\s+[=]{1}','') | regex_replace(\"\\s+=\\s+(.*)\\s+\",\":\\1,\")
    p_val: "{{  (( lookup('file',item[1]) | regex_replace('(:?(#.*))','') | regex_search('^.*'+item[0].name+'(\\s+)?=(\\s+)?(\\[.*\\])?(\\{([^}]*)\\})?(\".*\"\n)?',multiline=true)).split(item[0].name).1  | regex_replace('^(\\s+)?=(\\s+)?','') | regex_replace(\"\\s+=\\s+(.*)\\s+\",\":\\1,\") | regex_replace(',}','}') | trim | string).replace('\"',\"'\") }}"
    new_item: '{ "name":  "{{item[0].name}}", "type": "{{item[0].type }}", "description":"{{item[0].description}}", "value":"{{p_val}}" }'
  with_nested:
    - "{{asdf}}"
    - "{{ tfvars_file_paths}}"

- debug:
    msg: "{{ vars_dict}}"

- name: store in keyvault
  vars:
  azure_rm_keyvaultsecret:
    client_id: "{{ vault_client_id }}"
    tenant: "{{ vault_tenant }}"
    secret: "{{vault_secret}}"
    subscription_id: "{{ vault_subscription_id}}"
    secret_name: "tf-{{ deploy_tag | regex_replace('\\.','-') }}"
    secret_value: "{{ vars_dict }}"
    tags:
      atat_deploy_version: "some-atat-version }}"
    keyvault_uri: "{{ vault_url }}"

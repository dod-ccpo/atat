# deploy
---
# ops_keyvault_* use service principle that has read and list rights to target vault

- name: set tf_dir
  set_fact:
    tf_dir: "{{ tf_base_dir }}/{{tf_subdir}}"



- name: build backend
  set_fact:
    b_end: "{{ b_end|default({}) | combine( { item : tf_bootstrap_backend_outputs.outputs[item].value } ) }}"
  with_items: "{{ tf_bootstrap_backend_outputs.outputs }}"

- name: debug be
  debug:
    msg: "{{ b_end }}"

- name: "print config to json"
  include_role:
    name: azure_keyvault
  vars:
    get_secrets: true
    deploy_tag: deploy_tag
  when:
    - provision_environment is defined
    - vault_url is defined
    - tfvars_file_path is not defined

- name: set tf vars file path
  set_fact:
    tf_vars_file_path: "{{ tf_dir }}/{{ tfvars_file_name }}"
  when:
    - vault_url is not defined

- name: provision remote state tfvars
  set_fact:
    vars_vals: "{{ lookup('to_hcl', tf_vars_file_path )   }}"
  when: tf_vars_file_path is defined

- name: show tfvars
  debug:
    msg: "{{ lookup('to_hcl', tf_vars_file_path )  }}"

- name: make k/v
  set_fact:
    app_kv_tf: '{{ app_kv_tf|default({}) | combine({ item : (vars_vals[item] | regex_replace("''",''"''))  }) }}'
  with_items: "{{ vars_vals }}"

- name: sdhow tf_vars
  debug:
    msg: "{{ app_kv_tf | to_nice_json }}"



- name: tf plan (no modules)
  terraform:
    force_init: "{{ init_tf }}"
    project_path: "{{ tf_dir }}"
    state: "planned"
    plan_file: "plan.tfplan"
    variables: "{{ app_kv_tf }}"
    backend_config: "{{ b_end }}"
  register: tf_run
  environment:
    ARM_SUBSCRIPTION_ID: "{{ application_subscription_id }}"
  when:
    - target_modules is not defined
    - b_end is defined

- debug:
    msg: "{{ tf_run }}"

- name: tf apply (no modules)
  terraform:
    force_init: "{{ init_tf }}"
    project_path: "{{ tf_dir }}"
    state: "absent"
    plan_file: "plan.tfplan"
    variables: "{{ app_kv_tf }}"
    backend_config: "{{ b_end }}"
  register: tf_run_no_modules
  environment:
    ARM_SUBSCRIPTION_ID: "{{ application_subscription_id }}"
  when:
    - target_modules is not defined
    - b_end is defined

- debug:
    msg: "{{ tf_run }}"

- debug:
    msg: "{{ tf_run_no_modules }}"

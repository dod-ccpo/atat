---
name: Simple test run
on:
  pull_request:
  push:
    branches:
      - "master"
      - "develop"
      - "release/**"

jobs:
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  run-ci-tests:
    name: Run CI Tests
    runs-on: ubuntu-20.04
    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Pull RHEL UBI container
        run: |
          docker pull registry.access.redhat.com/ubi8:8.3
          docker tag registry.access.redhat.com/ubi8:8.3 ubi/ubi8:8.3
      - name: Build Python container
        run: |
          DOCKER_BUILDKIT=1 docker build \
              -t atat:rhel-py \
              -f python.Dockerfile \
              --build-arg IMAGE=ubi/ubi8:8.3 \
              --build-arg redhat_username \
              --build-arg redhat_password \
              .
        env:
          redhat_username: "${{ secrets.REDHAT_USERNAME }}"
          redhat_password: "${{ secrets.REDHAT_PASSWORD }}"
      - name: Build container
        run: |
          docker build . --build-arg GIT_SHA=${GITHUB_SHA} --build-arg IMAGE=atat:rhel-py -f ./Dockerfile -t atat:builder --target builder
          docker build . --build-arg GIT_SHA=${GITHUB_SHA} --build-arg IMAGE=atat:rhel-py -f ./Dockerfile -t atat:latest
      - name: Create PostgreSQL database
        run: |
          docker exec "${{ job.services.postgres.id }}" createdb -U postgres atat_test
      - name: Perform Alembic migrations
        run: |
          docker run \
            -e PGDATABASE=atat_test \
            -e PGHOST=postgres -e REDIS_HOST=redis:6379 \
            --network atat \
            atat:builder \
            .venv/bin/python .venv/bin/alembic upgrade head
      - name: Apply PostgreSQL default permission sets
        run:
          docker run \
            -e PGDATABASE=atat_test \
            -e PGHOST=postgres -e REDIS_HOST=redis:6379 \
            --network atat \
            atat:builder \
            .venv/bin/python script/seed_roles.py
      - name: Run tests
        run: |
          docker run \
            -e PGHOST=postgres \
            -e REDIS_HOST=redis:6379 \
            --network ${{ job.services.postgres.network }}
            atat:builder \
            /bin/sh -c "poetry install --no-root &&
                        wget https://releases.hashicorp.com/terraform/0.13.6/terraform_0.13.6_linux_amd64.zip -O /install/tf.zip &&
                        unzip /install/tf.zip -d /bin/ &&
                        /bin/sh script/cibuild"
      # The following steps are only necessary for the Ghost Inspector tests
      # which are not currently configured for this repository; however, the
      # following is a transalation of the Circle CI configuration.
      # - name: Start application container
      #   run: |
      #     docker run -d \
      #       -e PGHOST=postgres \
      #       -e REDIS_HOST=redis:6379 \
      #       --network ${{ job.services.postgres.network }}
      #       --name test-atat
      #       atat:builder \
      #       /bin/sh -c "
      #         echo CLOUD_PROVIDER=mock > .env &&\
      #         yarn build &&\
      #         pip3 install uwsgi &&\
      #         uwsgi \
      #         --callable app \
      #         --module app \
      #         --plugin python3 \
      #         --virtualenv /install/.venv \
      #         --http-socket :8000
      #       "
      # - name: Wait for ATAT container to be available
      #   run: |
      #     docker pull curlimages/curl:latest
      #     docker run --network ${{ job.services.postgres.network }} \
      #       curlimages/curl:latest \
      #       curl --connect-timeout 3 \
      #       --max-time 5 \
      #       --retry 120 \
      #       --retry-connrefused \
      #       --retry-delay 1 \
      #       --retry-max-time 120 \
      #       test-atat:8000
      # - name: Execute Ghost Inspector test suite
      #   run: |
      #       docker pull ghostinspector/test-runner-standalone:latest
      #       docker run \
      #         -e NGROK_TOKEN="${{ secrets.NGROK_TOKEN }}" \
      #         -e GI_API_KEY=${{ secrets.GI_API_KEY }} \
      #         -e GI_SUITE=${{ secrets.GI_SUITE }} \
      #         -e GI_PARAMS_JSON='{}' \
      #         -e APP_PORT="test-atat:8000" \
      #         --network atat \
      #         ghostinspector/test-runner-standalone:latest

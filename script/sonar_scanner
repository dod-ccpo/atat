#!/bin/bash

# script/sonarqube: Scan code base with sonarQube.

source ./script/include/helper_functions.inc.sh
source ./script/include/test_functions.inc.sh

if [ -z "$SONAR_TOKEN" ];
then
    echo "Please set the environment variable SONAR_TOKEN.  If you don't have a token, goto https://sonarcloud.io/account/security/."
    exit 1
fi

# script variables
SONAR_SCANNER_IMAGE="sonarsource/sonar-scanner-cli:4.5"
BRANCH=$(git rev-parse --abbrev-ref HEAD)
GIT_CLEAN=$(git diff --no-ext-diff)
TARGET_BRANCH="develop"

# check if user is on appropriate branch
# if [ $BRANCH != $TARGET_BRANCH ];
# then
#     echo "You are not on $TARGET_BRANCH."
#     exit 1
# fi

# verify there's no extra code laying around
# if [[ -n $GIT_CLEAN ]];
# then
#     echo "$TARGET_BRANCH is not clean."
#     exit 1
# fi

# exit when any command fails
set -e

git pull origin ${TARGET_BRANCH}

# run update script
script/update
run_python_render_vue_component

# generate coverage reports
poetry run pytest --cov-report=xml
yarn run jest --coverage --collectCoverageFrom='js/**/*.js' --no-cache --no-watchman

# repace local directory with container working directory
sed -i '' 's/\/atat\/atat/\/usr\/src\/atat/g' coverage.xml
sed -i '' 's/\/atat\/atat/\/usr\/src\/atat/g' coverage/lcov.info

# run SonarScanner using docker
docker run --rm \
    -e SONAR_TOKEN=$SONAR_TOKEN \
    -v $(pwd):/usr/src \
    $SONAR_SCANNER_IMAGE \
